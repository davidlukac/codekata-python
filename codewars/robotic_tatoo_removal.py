# Robotic Tattoo Removal
# http://www.codewars.com/kata/robotic-tattoo-removal

import unittest
from typing import List


def robot(skin_scan: List[List[chr]]) -> List[List[chr]]:
    for row_num, row in enumerate(skin_scan):
        for val_key, val in enumerate(row):
            if val == "X":
                skin_scan[row_num][val_key] = '*'
    return skin_scan


def robot_2(skin_scan: List[List[chr]]) -> List[List[chr]]:
    return list(map(lambda row: list(map(lambda val: '*' if val == 'X' else val, row)), skin_scan))


if __name__ == '__main__':
    unittest.main()


class TattooRobotTest(unittest.TestCase):
    in_1 = [
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", "X", "X", " ", " ", " ", "X", "X", " ", " "],
        [" ", "X", " ", " ", "X", " ", "X", " ", " ", "X", " "],
        [" ", "X", " ", " ", " ", "X", " ", " ", " ", "X", " "],
        [" ", "X", " ", " ", " ", "X", " ", " ", " ", "X", " "],
        [" ", "X", " ", " ", " ", " ", " ", " ", " ", "X", " "],
        [" ", "X", " ", " ", " ", " ", " ", " ", " ", "X", " "],
        [" ", "X", " ", " ", " ", " ", " ", " ", " ", "X", " "],
        [" ", " ", "X", " ", " ", " ", " ", " ", "X", " ", " "],
        [" ", " ", " ", "X", " ", " ", " ", "X", " ", " ", " "],
        [" ", " ", " ", " ", "X", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", "P", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "]
    ]

    out_1 = [
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", "*", "*", " ", " ", " ", "*", "*", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " ", " ", "*", " "],
        [" ", "*", " ", " ", " ", "*", " ", " ", " ", "*", " "],
        [" ", "*", " ", " ", " ", "*", " ", " ", " ", "*", " "],
        [" ", "*", " ", " ", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", " ", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", " ", " ", " ", " ", " ", " ", "*", " "],
        [" ", " ", "*", " ", " ", " ", " ", " ", "*", " ", " "],
        [" ", " ", " ", "*", " ", " ", " ", "*", " ", " ", " "],
        [" ", " ", " ", " ", "*", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", "P", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "]
    ]

    in_2 = [
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", "X", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", " ", "X", " ", " ", "X", " ", " ", " ", " "],
        [" ", " ", "X", "X", " ", " ", "X", "X", " ", " ", " "],
        [" ", "X", " ", " ", " ", " ", " ", " ", "X", " ", " "],
        [" ", "X", " ", " ", " ", " ", " ", " ", "X", " ", " "],
        [" ", "X", " ", " ", "X", "X", " ", " ", "X", " ", " "],
        [" ", " ", "X", "X", " ", " ", "X", "X", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "]
    ]

    out_2 = [
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", "*", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", "*", "*", " ", " ", "*", "*", " ", " ", " "],
        [" ", "*", " ", " ", " ", " ", " ", " ", "*", " ", " "],
        [" ", "*", " ", " ", " ", " ", " ", " ", "*", " ", " "],
        [" ", "*", " ", " ", "*", "*", " ", " ", "*", " ", " "],
        [" ", " ", "*", "*", " ", " ", "*", "*", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "]
    ]

    in_3 = [
        [" ", "X", " ", " ", " ", "X", " ", " ", " ", "X", " "],
        ["X", "$", "X", " ", " ", "X", " ", " ", "X", "$", "X"],
        [" ", "X", " ", " ", " ", "X", " ", " ", " ", "X", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
        ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " "],
        [" ", "X", " ", " ", " ", "X", " ", " ", " ", "X", " "],
        ["X", "$", "X", " ", " ", "X", " ", " ", "X", "$", "X"],
        [" ", "X", " ", " ", " ", "X", " ", " ", " ", "X", " "]
    ]

    out_3 = [
        [" ", "*", " ", " ", " ", "*", " ", " ", " ", "*", " "],
        ["*", "$", "*", " ", " ", "*", " ", " ", "*", "$", "*"],
        [" ", "*", " ", " ", " ", "*", " ", " ", " ", "*", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        ["*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"],
        ["*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", " ", "*", " ", " ", " ", "*", " "],
        ["*", "$", "*", " ", " ", "*", " ", " ", "*", "$", "*"],
        [" ", "*", " ", " ", " ", "*", " ", " ", " ", "*", " "]
    ]

    def test(self):
        self.assertEqual(robot(self.in_1), self.out_1)
        self.assertEqual(robot_2(self.in_1), self.out_1)

    def second_test(self):
        self.assertEqual(robot(self.in_2), self.out_2)
        self.assertEqual(robot_2(self.in_2), self.out_2)

    def third_test(self):
        self.assertEqual(robot(self.in_3), self.out_3)
        self.assertEqual(robot_2(self.in_3), self.out_3)
